{
  "setup": {
    "copyright": "Copyright 2019 Google Inc.",
    "license": "Apache License, Version 2.0"
  },
  "tasks": [
    {
      "dataset": {
        "auth": "service",
        "dataset": "Test",
        "description": "Create a dataset where data will be combined and transfored for upload.",
        "emails": [],
        "groups": []
      }
    },
    {
      "sheets": {
        "__comment__": "Copy the tamplate sheet to the users test sheet.",
        "auth": "user",
        "range": "A1:T",
        "sheet": "StarThinker Sheet Test",
        "tab": "Twitter Triggers",
        "template": {
          "sheet": "https://docs.google.com/spreadsheets/d/1iYCGa2NKOZiL2mdT4yiDfV_SWV9C7SUosXdIr4NAEXE/",
          "tab": "Twitter Triggers"
        }
      }
    },
    {
      "sheets": {
        "auth": "user",
        "description": "Read mapping of hash tags to line item toggles from sheets.",
        "out": {
          "bigquery": {
            "dataset": "Test",
            "schema": [
              {
                "mode": "REQUIRED",
                "name": "Location",
                "type": "STRING"
              },
              {
                "mode": "REQUIRED",
                "name": "WOEID",
                "type": "INTEGER"
              },
              {
                "mode": "REQUIRED",
                "name": "Hashtag",
                "type": "STRING"
              },
              {
                "mode": "REQUIRED",
                "name": "Line_Item_Id",
                "type": "INTEGER"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Name",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Status",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Start_Date",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_End_Date",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Budget_Type",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Budget_Amount",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Pacing",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Pacing_Rate",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Pacing_Amount",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Frequency_Enabled",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Frequency_Exposures",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Frequency_Period",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Line_Item_Frequency_Amount",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Bid_Price",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Partner_Revenue_Model",
                "type": "STRING"
              },
              {
                "mode": "NULLABLE",
                "name": "Partner_Revenue_Amount",
                "type": "STRING"
              }
            ],
            "table": "Twitter_Triggers"
          }
        },
        "range": "A8:T",
        "sheet": "StarThinker Sheet Test",
        "tab": "Twitter Triggers"
      }
    },
    {
      "twitter": {
        "auth": "user",
        "description": "Read trends from Twitter and place into BigQuery.",
        "key": "4bJAh3JPT535oLVPWh12RlTaI",
        "out": {
          "bigquery": {
            "dataset": "Test",
            "table": "Twitter_Trends_Place"
          }
        },
        "secret": "UtEmNhDJwGVYqYkgXcJMNkpGklH1jTrpGSjtxhCXsMfGrijBG6",
        "trends": {
          "places": {
            "bigquery": {
              "dataset": "Test",
              "query": "SELECT DISTINCT WOEID FROM `Test.Twitter_Triggers`"
            },
            "single_cell": true
          }
        }
      }
    },
    {
      "lineitem": {
        "auth": "user",
        "description": "Read current lineitem settings from DBM into BigQuery, so it can be joined with Twitter analysis.",
        "read": {
          "line_items": {
            "bigquery": {
              "dataset": "Test",
              "query": "SELECT DISTINCT Line_Item_Id FROM `Test.Twitter_Triggers`;"
            },
            "single_cell": true
          },
          "out": {
            "bigquery": {
              "dataset": "Test",
              "table": "LineItem_Reads"
            }
          }
        }
      }
    },
    {
      "bigquery": {
        "auth": "user",
        "description": "Get all triggered lineitmes from sheet, if they have a keyword match in twitter, take the triger values, else take the default values (default>trigger).  Take all non-null values from trigger and overlay over current DBM values. Will be used to upload to DBM.",
        "from": {
          "legacy": false,
          "query": "SELECT o.Line_Item_Id AS Line_Item_Id, o.Partner_Name AS Partner_Name, o.Partner_Id AS Partner_Id, o.Advertiser_Name AS Advertiser_Name, o.IO_Name AS IO_Name, IFNULL(t.Line_Item_Name, o.Line_Item_Name) AS Line_Item_Name, o.Line_Item_Timestamp AS Line_Item_Timestamp , IFNULL(t.Line_Item_Status, o.Line_Item_Status) AS Line_Item_Status, o.IO_Start_Date AS IO_Start_Date, o.IO_End_Date AS IO_End_Date, o.IO_Budget_Type AS IO_Budget_Type, o.IO_Budget_Amount AS IO_Budget_Amount, o.IO_Pacing AS IO_Pacing, o.IO_Pacing_Rate AS IO_Pacing_Rate, o.IO_Pacing_Amount AS IO_Pacing_Amount, IFNULL(t.Line_Item_Start_Date, o.Line_Item_Start_Date) AS Line_Item_Start_Date, IFNULL(t.Line_Item_End_Date, o.Line_Item_End_Date) AS Line_Item_End_Date, IFNULL(t.Line_Item_Budget_Type, o.Line_Item_Budget_Type) AS Line_Item_Budget_Type, IFNULL(t.Line_Item_Budget_Amount, o.Line_Item_Budget_Amount) AS Line_Item_Budget_Amount, IFNULL(t.Line_Item_Pacing, o.Line_Item_Pacing) AS Line_Item_Pacing, IFNULL(t.Line_Item_Pacing_Rate, o.Line_Item_Pacing_Rate) AS Line_Item_Pacing_Rate, IFNULL(t.Line_Item_Pacing_Amount, o.Line_Item_Pacing_Amount) AS Line_Item_Pacing_Amount, IFNULL(t.Line_Item_Frequency_Enabled, o.Line_Item_Frequency_Enabled) AS Line_Item_Frequency_Enabled, IFNULL(t.Line_Item_Frequency_Exposures, o.Line_Item_Frequency_Exposures) AS Line_Item_Frequency_Exposures, IFNULL(t.Line_Item_Frequency_Period, o.Line_Item_Frequency_Period) AS Line_Item_Frequency_Period, IFNULL(t.Line_Item_Frequency_Amount, o.Line_Item_Frequency_Amount) AS Line_Item_Frequency_Amount, IFNULL(t.Bid_Price, o.Bid_Price) AS Bid_Price, IFNULL(t.Partner_Revenue_Model, o.Partner_Revenue_Model) AS Partner_Revenue_Model, IFNULL(t.Partner_Revenue_Amount, o.Partner_Revenue_Amount) AS Partner_Revenue_Amount, o.Current_Audience_Targeting_Ids AS Current_Audience_Targeting_Ids , o.Current_Audience_Targeting_Names AS Current_Audience_Targeting_Names FROM `kenjora-161023.Test.LineItem_Reads` AS o LEFT JOIN ( SELECT Line_Item_Id, ANY_VALUE(SPLIT(Line_Item_Name, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_Name, ANY_VALUE(SPLIT(Line_Item_Status, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_Status, ANY_VALUE(SPLIT(Line_Item_Start_Date, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_Start_Date, ANY_VALUE(SPLIT(Line_Item_End_Date, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_End_Date, ANY_VALUE(SPLIT(Line_Item_Budget_Type, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_Budget_Type, ANY_VALUE(CAST(SPLIT(Line_Item_Budget_Amount, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))] AS FLOAT64)) AS Line_Item_Budget_Amount, ANY_VALUE(SPLIT(Line_Item_Pacing, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_Pacing, ANY_VALUE(SPLIT(Line_Item_Pacing_Rate, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_Pacing_Rate, ANY_VALUE(CAST(SPLIT(Line_Item_Pacing_Amount, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))] AS FLOAT64)) AS Line_Item_Pacing_Amount, ANY_VALUE(CAST(SPLIT(Line_Item_Frequency_Enabled, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))] AS BOOL)) AS Line_Item_Frequency_Enabled, ANY_VALUE(SPLIT(Line_Item_Frequency_Exposures, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_Frequency_Exposures, ANY_VALUE(SPLIT(Line_Item_Frequency_Period, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Line_Item_Frequency_Period, ANY_VALUE(CAST(SPLIT(Line_Item_Frequency_Amount, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))] AS INT64)) AS Line_Item_Frequency_Amount, ANY_VALUE(CAST(SPLIT(Bid_Price, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))] AS FLOAT64)) AS Bid_Price, ANY_VALUE(SPLIT(Partner_Revenue_Model, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))]) AS Partner_Revenue_Model, ANY_VALUE(CAST(SPLIT(Partner_Revenue_Amount, '>')[SAFE_OFFSET(IF(Triggered, 1, 0))] AS FLOAT64)) AS Partner_Revenue_Amount FROM ( SELECT WOEID, Hashtag, Line_Item_Id, Line_Item_Name, Line_Item_Status, Line_Item_Start_Date, Line_Item_End_Date, Line_Item_Budget_Type, Line_Item_Budget_Amount, Line_Item_Pacing, Line_Item_Pacing_Rate, Line_Item_Pacing_Amount, Line_Item_Frequency_Enabled, Line_Item_Frequency_Exposures, Line_Item_Frequency_Period, Line_Item_Frequency_Amount, Bid_Price, Partner_Revenue_Model, Partner_Revenue_Amount, CONCAT(CAST(WOEID AS STRING), LOWER(Hashtag)) IN (SELECT CONCAT(CAST(WOEID AS STRING), LOWER(REPLACE(name, '#', ''))) FROM `kenjora-161023.Test.Twitter_Trends_Place` GROUP BY 1) AS Triggered FROM `kenjora-161023.Test.Twitter_Triggers`) GROUP BY 1) AS t ON o.Line_Item_Id=t.Line_Item_Id;"
        },
        "to": {
          "dataset": "Test",
          "view": "LineItem_Writes"
        }
      }
    },
    {
      "lineitem": {
        "auth": "user",
        "description": "Write lineitem settings to DBM after transformation.",
        "write": {
          "bigquery": {
            "dataset": "Test",
            "query": "SELECT * FROM `Test.LineItem_Writes`;"
          },
          "dry_run": false
        }
      }
    }
  ]
}